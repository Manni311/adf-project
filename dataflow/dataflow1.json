{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Excel2",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "typeexcel",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"description": "transfer data to localdatabase"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "join1",
					"description": "joining to source 2"
				},
				{
					"name": "skdate"
				},
				{
					"name": "idcolumn"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          InvoiceNumber as string,",
				"          Date as string,",
				"          Type as string,",
				"          Period as string,",
				"          DueDate as string,",
				"          InvoiceDate as string,",
				"          FromDate as string,",
				"          ToDate as string,",
				"          NetAmount as integer,",
				"          VatAmount as integer,",
				"          grossValue as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          SKTransType as string,",
				"          BKTransType as string,",
				"          TransDesc as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"skdate derive(Date = toString(toDate(Date, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
				"          Period = toString(toDate(Period, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
				"          DueDate = toString(toDate(DueDate, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
				"          FromDate = toString(toDate(FromDate, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
				"          ToDate = toString(toDate(ToDate, 'yyyy-MM-dd'), 'dd-MM-yyyy'),",
				"          skdate = toString(toDate(skdate, 'yyyy-MM-dd'), 'dd-MM-yyyy')) ~> derivedColumn1",
				"source1, source2 join(Type == BKTransType,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(skdate = toString(Date, 'ddMMyyyy'),",
				"          {Charecontrol number} = concat(Type+'-'+InvoiceNumber),",
				"          {Filename          } = concat('sales', toString(currentDate(), 'ddMMyyyy'), '.xlsx'),",
				"          {AsOfDate   } = toString(\r",
				"    addDays(\r",
				"       toDate(\r",
				"          concat(\r",
				"             substring(toString(addMonths(toDate(Date, 'yy-MM-dd'), 1), 'yyyy-MM-dd'), 0, 7),\r",
				"             '-01'\r",
				"          ), 'yyyy-MM-dd'\r",
				"       ),\r",
				"       -1\r",
				"    ),\r",
				"    'dd-MM-yyyy'\r",
				")\r",
				",",
				"          {Amount _Paid/Received} = iif(\r",
				"    (NetAmount + VatAmount) * grossValue >= 800000,\r",
				"    iif(\r",
				"       Type == 'C', 'charge is high',\r",
				"       iif(\r",
				"          Type == 'P', 'Payable is high',\r",
				"          iif(\r",
				"             Type == 'K', 'Cheque is high',\r",
				"             iif(\r",
				"                Type == 'J', 'Journal entry is high',\r",
				"                iif(\r",
				"                   Type == 'R', 'Receipt is high',\r",
				"                   'Unknown Type'\r",
				"                )\r",
				"             )\r",
				"          )\r",
				"       )\r",
				"    ),\r",
				"    iif(\r",
				"       (NetAmount + VatAmount) * grossValue >= 400000,\r",
				"       iif(\r",
				"          Type == 'C', 'charge is medium',\r",
				"          iif(\r",
				"             Type == 'P', 'Payable is medium',\r",
				"             iif(\r",
				"                Type == 'K', 'Cheque is medium',\r",
				"                iif(\r",
				"                   Type == 'J', 'Journal entry is medium',\r",
				"                   iif(\r",
				"                      Type == 'R', 'Receipt is medium',\r",
				"                      'Unknown Type'\r",
				"                   )\r",
				"                )\r",
				"             )\r",
				"          )\r",
				"       ),\r",
				"       iif(\r",
				"          (NetAmount + VatAmount) * grossValue >= 100000,\r",
				"          iif(\r",
				"             Type == 'C', 'charge is Low',\r",
				"             iif(\r",
				"                Type == 'P', 'Payable is Low',\r",
				"                iif(\r",
				"                   Type == 'K', 'Cheque is Low',\r",
				"                   iif(\r",
				"                      Type == 'J', 'Journal entry is Low',\r",
				"                      iif(\r",
				"                         Type == 'R', 'Receipt is Low',\r",
				"                         'Unknown Type'\r",
				"                      )\r",
				"                   )\r",
				"                )\r",
				"             )\r",
				"          ),\r",
				"          iif(\r",
				"             (NetAmount + VatAmount) * grossValue < 100000,\r",
				"             iif(\r",
				"                Type == 'C', 'charge is very Low',\r",
				"                iif(\r",
				"                   Type == 'P', 'Payable is very Low',\r",
				"                   iif(\r",
				"                      Type == 'K', 'Cheque is very Low',\r",
				"                      iif(\r",
				"                         Type == 'J', 'Journal entry is very Low',\r",
				"                         iif(\r",
				"                            Type == 'R', 'Receipt is very Low',\r",
				"                            'Unknown Type'\r",
				"                         )\r",
				"                      )\r",
				"                   )\r",
				"                )\r",
				"             ),\r",
				"             'Amount out of range'\r",
				"          )\r",
				"       )\r",
				"    )\r",
				")\r",
				") ~> skdate",
				"derivedColumn1 keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> idcolumn",
				"idcolumn select(mapColumn(",
				"          id,",
				"          InvoiceNumber,",
				"          Date,",
				"          Type,",
				"          Period,",
				"          DueDate,",
				"          InvoiceDate,",
				"          FromDate,",
				"          ToDate,",
				"          NetAmount,",
				"          VatAmount,",
				"          grossValue,",
				"          SKTransType,",
				"          BKTransType,",
				"          TransDesc,",
				"          skdate,",
				"          {Charecontrol number},",
				"          {Filename          },",
				"          {AsOfDate   },",
				"          {Amount _Paid/Received}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}